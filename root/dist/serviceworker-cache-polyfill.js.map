{"version":3,"sources":["../../src/workers/serviceworker-cache-polyfill.js"],"names":[],"mappings":";;AAAA,IAAI,CAAC,MAAM,SAAN,CAAgB,GAArB,EAA0B;AACxB,QAAM,SAAN,CAAgB,GAAhB,GAAsB,SAAS,GAAT,CAAa,OAAb,EAAsB;AAC1C,WAAO,KAAK,MAAL,CAAY,CAAC,OAAD,CAAZ,CAAP;AACD,GAFD;AAGD;;AAED,IAAI,CAAC,MAAM,SAAN,CAAgB,MAArB,EAA6B;AAC3B,QAAM,SAAN,CAAgB,MAAhB,GAAyB,SAAS,MAAT,CAAgB,QAAhB,EAA0B;AACjD,QAAI,QAAQ,IAAZ;;;AAGA,aAAS,YAAT,CAAsB,OAAtB,EAA+B;AAC7B,WAAK,IAAL,GAAY,cAAZ;AACA,WAAK,IAAL,GAAY,EAAZ;AACA,WAAK,OAAL,GAAe,OAAf;AACD;AACD,iBAAa,SAAb,GAAyB,OAAO,MAAP,CAAc,MAAM,SAApB,CAAzB;;AAEA,WAAO,QAAQ,OAAR,GAAkB,IAAlB,CAAuB,YAAW;AACvC,UAAI,UAAU,MAAV,GAAmB,CAAvB,EAA0B,MAAM,IAAI,SAAJ,EAAN;;AAE1B,iBAAW,SAAS,GAAT,CAAa,UAAS,OAAT,EAAkB;AACxC,YAAI,mBAAmB,OAAvB,EAAgC;AAC9B,iBAAO,OAAP;AACD,SAFD,MAGK;AACH,iBAAO,OAAO,OAAP,CAAP,C;AACD;AACF,OAPU,CAAX;;AASA,aAAO,QAAQ,GAAR,CACL,SAAS,GAAT,CAAa,UAAS,OAAT,EAAkB;AAC7B,YAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,oBAAU,IAAI,OAAJ,CAAY,OAAZ,CAAV;AACD;;AAED,YAAI,SAAS,IAAI,GAAJ,CAAQ,QAAQ,GAAhB,EAAqB,QAAlC;;AAEA,YAAI,WAAW,OAAX,IAAsB,WAAW,QAArC,EAA+C;AAC7C,gBAAM,IAAI,YAAJ,CAAiB,gBAAjB,CAAN;AACD;;AAED,eAAO,MAAM,QAAQ,KAAR,EAAN,CAAP;AACD,OAZD,CADK,CAAP;AAeD,KA3BM,EA2BJ,IA3BI,CA2BC,UAAS,SAAT,EAAoB;;;AAG1B,aAAO,QAAQ,GAAR,CACL,UAAU,GAAV,CAAc,UAAS,QAAT,EAAmB,CAAnB,EAAsB;AAClC,eAAO,MAAM,GAAN,CAAU,SAAS,CAAT,CAAV,EAAuB,QAAvB,CAAP;AACD,OAFD,CADK,CAAP;AAKD,KAnCM,EAmCJ,IAnCI,CAmCC,YAAW;AACjB,aAAO,SAAP;AACD,KArCM,CAAP;AAsCD,GAjDD;AAkDD","file":"serviceworker-cache-polyfill.js","sourcesContent":["if (!Cache.prototype.add) {\n  Cache.prototype.add = function add(request) {\n    return this.addAll([request]);\n  };\n}\n\nif (!Cache.prototype.addAll) {\n  Cache.prototype.addAll = function addAll(requests) {\n    var cache = this;\n\n    // Since DOMExceptions are not constructable:\n    function NetworkError(message) {\n      this.name = 'NetworkError';\n      this.code = 19;\n      this.message = message;\n    }\n    NetworkError.prototype = Object.create(Error.prototype);\n\n    return Promise.resolve().then(function() {\n      if (arguments.length < 1) throw new TypeError();\n\n      requests = requests.map(function(request) {\n        if (request instanceof Request) {\n          return request;\n        }\n        else {\n          return String(request); // may throw TypeError\n        }\n      });\n\n      return Promise.all(\n        requests.map(function(request) {\n          if (typeof request === 'string') {\n            request = new Request(request);\n          }\n\n          var scheme = new URL(request.url).protocol;\n\n          if (scheme !== 'http:' && scheme !== 'https:') {\n            throw new NetworkError('Invalid scheme');\n          }\n\n          return fetch(request.clone());\n        })\n      );\n    }).then(function(responses) {\n      // TODO: check that requests don't overwrite one another\n      // (don't think this is possible to polyfill due to opaque responses)\n      return Promise.all(\n        responses.map(function(response, i) {\n          return cache.put(requests[i], response);\n        })\n      );\n    }).then(function() {\n      return undefined;\n    });\n  };\n}\n"]}